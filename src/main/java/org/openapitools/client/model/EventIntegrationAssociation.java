/*
 * Amazon AppIntegrations Service
 * <p>The Amazon AppIntegrations service enables you to configure and reuse connections to external applications.</p> <p>For information about how you can use external applications with Amazon Connect, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/crm.html\">Set up pre-built integrations</a> and <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-wisdom.html\">Deliver information to agents using Amazon Connect Wisdom</a> in the <i>Amazon Connect Administrator Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2020-07-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The event integration association.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T13:42:31.566517+05:30[Asia/Kolkata]", comments = "Generator version: 7.10.0")
public class EventIntegrationAssociation {
  public static final String SERIALIZED_NAME_EVENT_INTEGRATION_ASSOCIATION_ARN = "EventIntegrationAssociationArn";
  @SerializedName(SERIALIZED_NAME_EVENT_INTEGRATION_ASSOCIATION_ARN)
  @javax.annotation.Nullable
  private String eventIntegrationAssociationArn;

  public static final String SERIALIZED_NAME_EVENT_INTEGRATION_ASSOCIATION_ID = "EventIntegrationAssociationId";
  @SerializedName(SERIALIZED_NAME_EVENT_INTEGRATION_ASSOCIATION_ID)
  @javax.annotation.Nullable
  private String eventIntegrationAssociationId;

  public static final String SERIALIZED_NAME_EVENT_INTEGRATION_NAME = "EventIntegrationName";
  @SerializedName(SERIALIZED_NAME_EVENT_INTEGRATION_NAME)
  @javax.annotation.Nullable
  private String eventIntegrationName;

  public static final String SERIALIZED_NAME_CLIENT_ID = "ClientId";
  @SerializedName(SERIALIZED_NAME_CLIENT_ID)
  @javax.annotation.Nullable
  private String clientId;

  public static final String SERIALIZED_NAME_EVENT_BRIDGE_RULE_NAME = "EventBridgeRuleName";
  @SerializedName(SERIALIZED_NAME_EVENT_BRIDGE_RULE_NAME)
  @javax.annotation.Nullable
  private String eventBridgeRuleName;

  public static final String SERIALIZED_NAME_CLIENT_ASSOCIATION_METADATA = "ClientAssociationMetadata";
  @SerializedName(SERIALIZED_NAME_CLIENT_ASSOCIATION_METADATA)
  @javax.annotation.Nullable
  private Map clientAssociationMetadata;

  public EventIntegrationAssociation() {
  }

  public EventIntegrationAssociation eventIntegrationAssociationArn(@javax.annotation.Nullable String eventIntegrationAssociationArn) {
    this.eventIntegrationAssociationArn = eventIntegrationAssociationArn;
    return this;
  }

  /**
   * Get eventIntegrationAssociationArn
   * @return eventIntegrationAssociationArn
   */
  @javax.annotation.Nullable
  public String getEventIntegrationAssociationArn() {
    return eventIntegrationAssociationArn;
  }

  public void setEventIntegrationAssociationArn(@javax.annotation.Nullable String eventIntegrationAssociationArn) {
    this.eventIntegrationAssociationArn = eventIntegrationAssociationArn;
  }


  public EventIntegrationAssociation eventIntegrationAssociationId(@javax.annotation.Nullable String eventIntegrationAssociationId) {
    this.eventIntegrationAssociationId = eventIntegrationAssociationId;
    return this;
  }

  /**
   * Get eventIntegrationAssociationId
   * @return eventIntegrationAssociationId
   */
  @javax.annotation.Nullable
  public String getEventIntegrationAssociationId() {
    return eventIntegrationAssociationId;
  }

  public void setEventIntegrationAssociationId(@javax.annotation.Nullable String eventIntegrationAssociationId) {
    this.eventIntegrationAssociationId = eventIntegrationAssociationId;
  }


  public EventIntegrationAssociation eventIntegrationName(@javax.annotation.Nullable String eventIntegrationName) {
    this.eventIntegrationName = eventIntegrationName;
    return this;
  }

  /**
   * Get eventIntegrationName
   * @return eventIntegrationName
   */
  @javax.annotation.Nullable
  public String getEventIntegrationName() {
    return eventIntegrationName;
  }

  public void setEventIntegrationName(@javax.annotation.Nullable String eventIntegrationName) {
    this.eventIntegrationName = eventIntegrationName;
  }


  public EventIntegrationAssociation clientId(@javax.annotation.Nullable String clientId) {
    this.clientId = clientId;
    return this;
  }

  /**
   * Get clientId
   * @return clientId
   */
  @javax.annotation.Nullable
  public String getClientId() {
    return clientId;
  }

  public void setClientId(@javax.annotation.Nullable String clientId) {
    this.clientId = clientId;
  }


  public EventIntegrationAssociation eventBridgeRuleName(@javax.annotation.Nullable String eventBridgeRuleName) {
    this.eventBridgeRuleName = eventBridgeRuleName;
    return this;
  }

  /**
   * Get eventBridgeRuleName
   * @return eventBridgeRuleName
   */
  @javax.annotation.Nullable
  public String getEventBridgeRuleName() {
    return eventBridgeRuleName;
  }

  public void setEventBridgeRuleName(@javax.annotation.Nullable String eventBridgeRuleName) {
    this.eventBridgeRuleName = eventBridgeRuleName;
  }


  public EventIntegrationAssociation clientAssociationMetadata(@javax.annotation.Nullable Map clientAssociationMetadata) {
    this.clientAssociationMetadata = clientAssociationMetadata;
    return this;
  }

  /**
   * Get clientAssociationMetadata
   * @return clientAssociationMetadata
   */
  @javax.annotation.Nullable
  public Map getClientAssociationMetadata() {
    return clientAssociationMetadata;
  }

  public void setClientAssociationMetadata(@javax.annotation.Nullable Map clientAssociationMetadata) {
    this.clientAssociationMetadata = clientAssociationMetadata;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EventIntegrationAssociation eventIntegrationAssociation = (EventIntegrationAssociation) o;
    return Objects.equals(this.eventIntegrationAssociationArn, eventIntegrationAssociation.eventIntegrationAssociationArn) &&
        Objects.equals(this.eventIntegrationAssociationId, eventIntegrationAssociation.eventIntegrationAssociationId) &&
        Objects.equals(this.eventIntegrationName, eventIntegrationAssociation.eventIntegrationName) &&
        Objects.equals(this.clientId, eventIntegrationAssociation.clientId) &&
        Objects.equals(this.eventBridgeRuleName, eventIntegrationAssociation.eventBridgeRuleName) &&
        Objects.equals(this.clientAssociationMetadata, eventIntegrationAssociation.clientAssociationMetadata);
  }

  @Override
  public int hashCode() {
    return Objects.hash(eventIntegrationAssociationArn, eventIntegrationAssociationId, eventIntegrationName, clientId, eventBridgeRuleName, clientAssociationMetadata);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EventIntegrationAssociation {\n");
    sb.append("    eventIntegrationAssociationArn: ").append(toIndentedString(eventIntegrationAssociationArn)).append("\n");
    sb.append("    eventIntegrationAssociationId: ").append(toIndentedString(eventIntegrationAssociationId)).append("\n");
    sb.append("    eventIntegrationName: ").append(toIndentedString(eventIntegrationName)).append("\n");
    sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
    sb.append("    eventBridgeRuleName: ").append(toIndentedString(eventBridgeRuleName)).append("\n");
    sb.append("    clientAssociationMetadata: ").append(toIndentedString(clientAssociationMetadata)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("EventIntegrationAssociationArn");
    openapiFields.add("EventIntegrationAssociationId");
    openapiFields.add("EventIntegrationName");
    openapiFields.add("ClientId");
    openapiFields.add("EventBridgeRuleName");
    openapiFields.add("ClientAssociationMetadata");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EventIntegrationAssociation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EventIntegrationAssociation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EventIntegrationAssociation is not found in the empty JSON string", EventIntegrationAssociation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EventIntegrationAssociation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EventIntegrationAssociation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `EventIntegrationAssociationArn`
      if (jsonObj.get("EventIntegrationAssociationArn") != null && !jsonObj.get("EventIntegrationAssociationArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("EventIntegrationAssociationArn"));
      }
      // validate the optional field `EventIntegrationAssociationId`
      if (jsonObj.get("EventIntegrationAssociationId") != null && !jsonObj.get("EventIntegrationAssociationId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("EventIntegrationAssociationId"));
      }
      // validate the optional field `EventIntegrationName`
      if (jsonObj.get("EventIntegrationName") != null && !jsonObj.get("EventIntegrationName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("EventIntegrationName"));
      }
      // validate the optional field `ClientId`
      if (jsonObj.get("ClientId") != null && !jsonObj.get("ClientId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ClientId"));
      }
      // validate the optional field `EventBridgeRuleName`
      if (jsonObj.get("EventBridgeRuleName") != null && !jsonObj.get("EventBridgeRuleName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("EventBridgeRuleName"));
      }
      // validate the optional field `ClientAssociationMetadata`
      if (jsonObj.get("ClientAssociationMetadata") != null && !jsonObj.get("ClientAssociationMetadata").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("ClientAssociationMetadata"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EventIntegrationAssociation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EventIntegrationAssociation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EventIntegrationAssociation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EventIntegrationAssociation.class));

       return (TypeAdapter<T>) new TypeAdapter<EventIntegrationAssociation>() {
           @Override
           public void write(JsonWriter out, EventIntegrationAssociation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EventIntegrationAssociation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EventIntegrationAssociation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EventIntegrationAssociation
   * @throws IOException if the JSON string is invalid with respect to EventIntegrationAssociation
   */
  public static EventIntegrationAssociation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EventIntegrationAssociation.class);
  }

  /**
   * Convert an instance of EventIntegrationAssociation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

